var a=12

1.重复声明
var a=12;
var a=5;

2.控制修改
var GIT_HOST='github.com'
if(GIT_HOST='git')

3.块级作用域

let     防止重复声明，变量，
const   防止重复声明，常量，

ES5的var的作用域——函数级
ES6的let的作用域——块级

代码块——{}

if(){

}

for(){

}

{

}



for(i=0;i<3;i++){

}
i

变量：
var   重复声明，不能限制修改，函数级

let   不能，变量，块级
const 不能，常量，块级

--------------------------------------------------------------------------------

解构赋值
json={a: 12, b: 5};
let {a,b}=json;

arr=[12,5,8];
let [a,b,c]=arr;

$.ajax('xxxx')=>
{
  code: xx,
  data: xx,
  msg,
  xxx
}

let {code,data}=$.ajax('xxx');

--------------------------------------------------------------------------------

1.两边的结构必须一样
2.右边必须得是个东西
3.赋值和解构同时完成

let {a,b}=[12,6];
let {a,b}={12,5};

let {a,b};

{a,b}={a: 12, b: 5};

--------------------------------------------------------------------------------

箭头函数
function (){
  ...
}
()=>{}

简写
1.如果有且仅有一个参数，()也可以不写
2.如果有且仅有一个语句并且是return，{}也可以不写

--------------------------------------------------------------------------------

修正this

--------------------------------------------------------------------------------

...
参数展开
  收集
  展开

数组展开
json展开

--------------------------------------------------------------------------------

map       映射：一一对应
          [68, 53, 12, 98, 65] => [及格, 不及格, 不及格, 及格, 及格]

reduce    n=>1

filter    过滤

forEach   遍历

--------------------------------------------------------------------------------

18+35+27+96+98+19
53+27+96+98+19
80+96+98+19
176+98+19

--------------------------------------------------------------------------------

JSON.stringify({a: 12, b: 5})     => '{"a": 12, "b": 5}'
JSON.parse('{"a": 12, "b": 5}')   => {a: 12, b: 5}
